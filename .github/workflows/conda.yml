name: Build and test with conda

on:
  push:
  pull_request:
  schedule:
    - cron: '47 6 * * *'


# Automatically stop old builds on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -el {0}

jobs:
  unix-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        environment: ["py310-pa13"]
        os: ["macos-latest", "ubuntu-latest"]
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Fetch full git history
        run: git fetch --prune --unshallow
      - name: Set up pixi
        uses: prefix-dev/setup-pixi@ba3bb36eb2066252b2363392b7739741bb777659
        with:
          environments: ${{ matrix.environment }}
      - name: Build and test
        shell: pixi run bash -e {0}
        run: |
          mv pyproject.toml.meson pyproject.toml
          python -m build
          python -m pip install dist/*.whl
  windows-pixi-tests:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        environment: ["py310-pa13"]
    steps:
      - name: Create SQL Server
        shell: pwsh
        run: |
          Write-Host "Downloading"
          Import-Module BitsTransfer
          Start-BitsTransfer -Source "https://download.microsoft.com/download/3/8/d/38de7036-2433-4207-8eae-06e247e17b25/SqlLocalDB.msi" -Destination SqlLocalDB.msi
          Write-Host "Installing"
          Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES"
          sqlcmd -S '(localdb)\MSSQLLocalDB' -Q 'CREATE DATABASE test_db' -l 60
      - name: Configure ODBC Data Source
        run: |
          odbcconf /a {CONFIGDSN "ODBC Driver 17 for SQL Server" "DSN=MSSQL|Server=(localdb)\MSSQLLocalDB|Database=test_db|Trusted_Connection=Yes"}
          if %errorlevel% neq 0 exit /b %errorlevel%
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Fetch full git history
        run: git fetch --prune --unshallow
      - name: Set up pixi
        uses: prefix-dev/setup-pixi@ba3bb36eb2066252b2363392b7739741bb777659
        with:
          environments: ${{ matrix.environment }}
      - run: mv pyproject.toml.meson pyproject.toml
      - name: Build wheel
        shell: pixi run pwsh -Command {0}
        run: python -m build
      - name: Install and test wheel
        shell: pixi run pwsh -Command {0}
        run: |
          python -m pip install dist/*.whl
  windows-tests:
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd /C call {0}
    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: ['3.10']
        PYARROW_VERSION: ['14.0.1']
    steps:
      - name: Create SQL Server
        shell: pwsh
        run: |
          Write-Host "Downloading"
          Import-Module BitsTransfer
          Start-BitsTransfer -Source "https://download.microsoft.com/download/3/8/d/38de7036-2433-4207-8eae-06e247e17b25/SqlLocalDB.msi" -Destination SqlLocalDB.msi
          Write-Host "Installing"
          Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES"
          sqlcmd -S '(localdb)\MSSQLLocalDB' -Q 'CREATE DATABASE test_db' -l 60
      - name: Configure ODBC Data Source
        run: |
          odbcconf /a {CONFIGDSN "ODBC Driver 17 for SQL Server" "DSN=MSSQL|Server=(localdb)\MSSQLLocalDB|Database=test_db|Trusted_Connection=Yes"}
          if %errorlevel% neq 0 exit /b %errorlevel%
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Fetch full git history
        run: git fetch --prune --unshallow
      - name: Set up Conda env
        uses: mamba-org/provision-with-micromamba@e2b397b12d0a38069451664382b769c9456e3d6d
        with:
          condarc-file: .github/workflows/.condarc
          cache-env: true
          environment-file: environment.yml
          extra-specs: |
            python=${{ matrix.PYTHON_VERSION }}
            pyarrow=${{ matrix.PYARROW_VERSION }}
            pytest-md
            pytest-emoji
            pytest-cov
      - name: Configure with CMake
        run: |
          @CALL micromamba activate turbodbc
          @echo on
          mkdir build
          cd build
          cmake -DBUILD_COVERAGE=ON -DCMAKE_INSTALL_PREFIX=./dist -DCMAKE_BUILD_TYPE=Release -GNinja ..
          if %errorlevel% neq 0 exit /b %errorlevel%
      - name: Build with CMake
        run: |
          @CALL micromamba activate turbodbc
          @echo on
          cd build
          ninja
          if %errorlevel% neq 0 exit /b %errorlevel%
          cmake --build . --target install
          if %errorlevel% neq 0 exit /b %errorlevel%
      - name: Install repository
        run: |
          @CALL micromamba activate turbodbc
          @echo on
          cd build/dist
          dir src
          dir src\turbodbc_arrow
          if %errorlevel% neq 0 exit /b %errorlevel%
          python -m pip install --no-build-isolation --no-deps --disable-pip-version-check -e .
          if %errorlevel% neq 0 exit /b %errorlevel%
      - name: Test import
        run: |
          @CALL micromamba activate turbodbc
          @echo on
          cd /
          if %errorlevel% neq 0 exit /b %errorlevel%
          python -c "import turbodbc"
          if %errorlevel% neq 0 exit /b %errorlevel%
          python -c "import turbodbc.arrow_support"
          if %errorlevel% neq 0 exit /b %errorlevel%
      - name: Run tests
        run: |
          @CALL micromamba activate turbodbc
          @echo on
          cd build
          ctest --verbose
          if %errorlevel% neq 0 exit /b %errorlevel%
